/** 
 * \mainpage Introduction

# Function
This IP core, implemented in the form of a C function with Vivado HLS, realizes the SVPWM transform used in the <a href="https://en.wikipedia.org/wiki/Vector_control_(motor)">field-oriented control (FOC)</a> method.
In this core used simplified SVPWM algorithm which is equivalent to the conventional modulation.
At first stage calculated minimum and maximum of all three phase voltages to provide voltage offset for second stage. Then voltage offset is substracted from the instantaneous three phase voltages.
It transforms the input AXI4-Stream, consisting of the sinus voltages of the three phases \f$V_a\f$, \f$V_b\f$ and \f$V_c\f$, to the output AXI4-Stream, consisting of values \f$V'_a\f$, \f$V'_b\f$ and \f$V'_c\f$ by using the following equations:
\f{equation}{
 V'_a = V_a - V_{off},
\f}
\f{equation}{
 V'_b = V_b - V_{off},
\f}
\f{equation}{
 V'_c = V_c - V_{off},
\f}
where
\f{equation}{
 V_{off} = \frac{\min(V_a, V_b, V_c) + \max(V_a, V_b, V_c)}{2}
\f}

# Implementation
## Applicable Devices ##
This HLS C function and generated IP core can be used on any Xilinx devices supported by Vivado HLS.

## Synthesis Report ##
The target device used for synthesis is xc7z020clg400-1.

See the chapter \ref report_SVPWM_csynth "Vivado HLS Report for 'SVPWM'" for the synthesis report, including the following:
- Estimates of the used primitives in the section "Utilization Estimates".
- Timing performance estimates in the section "Performance Estimates" for the following:
	- Maximum clock frequency.
	- Latency, both minimum and maximum.
	- Interval, both minimum and maximum.
- RTL interfaces, including AXI4-Stream interfaces and additional RTL ports added by the HLS synthesis, in the section "Interface".

## Interface ##
The interface described in the form of a C function is as follows:
\code{.cpp}
	void SVPWM(
		hls::stream<int64_t> &inputStream,
		hls::stream<int64_t> &outputStream);
\endcode
See the description of the function SVPWM() for the encoding of the input and output streams.

# Simulation #
A C-based testbench for C/RTL cosimulation is in the file test_svpwm.cpp.

# Tools #
Vivado HLS is needed for C to RTL synthesis, for C simulation and for IP packaging (export). The function itself can be implemented with Vivado.

Doxygen is used for generating documentation from the comments included in the C source code.

Tool        | Version  | Notes
----------- | -------- | -----------------------------------
Vivado HLS  | 2017.1   | Synthesis, C simulation, RTL export 
Vivado      | 2017.1   | Implementation
Doxygen     | 1.8.11   | Documentation extraction
MiKTeX      | 2.9      | PDF generation

*/
