// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.1
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="PI_Control,hls_ip_2017_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.589500,HLS_SYN_LAT=8,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=5,HLS_SYN_FF=591,HLS_SYN_LUT=639}" *)

module PI_Control (
        ap_clk,
        ap_rst_n,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        s_axis_V_TDATA,
        s_axis_V_TVALID,
        s_axis_V_TREADY,
        m_axis_V_TDATA,
        m_axis_V_TVALID,
        m_axis_V_TREADY,
        Sp,
        Kp,
        Ki,
        mode,
        limit
);

parameter    ap_ST_fsm_state1 = 9'd1;
parameter    ap_ST_fsm_state2 = 9'd2;
parameter    ap_ST_fsm_state3 = 9'd4;
parameter    ap_ST_fsm_state4 = 9'd8;
parameter    ap_ST_fsm_state5 = 9'd16;
parameter    ap_ST_fsm_state6 = 9'd32;
parameter    ap_ST_fsm_state7 = 9'd64;
parameter    ap_ST_fsm_state8 = 9'd128;
parameter    ap_ST_fsm_state9 = 9'd256;

input   ap_clk;
input   ap_rst_n;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [15:0] s_axis_V_TDATA;
input   s_axis_V_TVALID;
output   s_axis_V_TREADY;
output  [15:0] m_axis_V_TDATA;
output   m_axis_V_TVALID;
input   m_axis_V_TREADY;
input  [15:0] Sp;
input  [15:0] Kp;
input  [15:0] Ki;
input  [31:0] mode;
input  [31:0] limit;

reg ap_done;
reg ap_idle;
reg ap_ready;

reg    ap_rst_n_inv;
(* fsm_encoding = "none" *) reg   [8:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [15:0] s_axis_V_0_data_out;
wire    s_axis_V_0_vld_in;
wire    s_axis_V_0_vld_out;
wire    s_axis_V_0_ack_in;
reg    s_axis_V_0_ack_out;
reg   [15:0] s_axis_V_0_payload_A;
reg   [15:0] s_axis_V_0_payload_B;
reg    s_axis_V_0_sel_rd;
reg    s_axis_V_0_sel_wr;
wire    s_axis_V_0_sel;
wire    s_axis_V_0_load_A;
wire    s_axis_V_0_load_B;
reg   [1:0] s_axis_V_0_state;
wire    s_axis_V_0_state_cmp_full;
reg   [15:0] m_axis_V_1_data_out;
reg    m_axis_V_1_vld_in;
wire    m_axis_V_1_vld_out;
wire    m_axis_V_1_ack_in;
wire    m_axis_V_1_ack_out;
reg   [15:0] m_axis_V_1_payload_A;
reg   [15:0] m_axis_V_1_payload_B;
reg    m_axis_V_1_sel_rd;
reg    m_axis_V_1_sel_wr;
wire    m_axis_V_1_sel;
wire    m_axis_V_1_load_A;
wire    m_axis_V_1_load_B;
reg   [1:0] m_axis_V_1_state;
wire    m_axis_V_1_state_cmp_full;
reg   [31:0] Mode_prev;
reg   [31:0] GiE_prev;
reg    s_axis_V_TDATA_blk_n;
wire    ap_CS_fsm_state2;
reg    m_axis_V_TDATA_blk_n;
wire    ap_CS_fsm_state8;
wire    ap_CS_fsm_state9;
wire   [16:0] Err_fu_173_p3;
reg   [16:0] Err_reg_362;
wire   [0:0] tmp_6_fu_185_p2;
reg   [0:0] tmp_6_reg_367;
wire    ap_CS_fsm_state3;
wire  signed [31:0] Err_cast_fu_197_p1;
reg  signed [31:0] Err_cast_reg_377;
wire   [31:0] x_assign_1_fu_211_p2;
reg   [31:0] x_assign_1_reg_382;
wire   [31:0] x_min_assign_fu_217_p2;
reg   [31:0] x_min_assign_reg_387;
wire   [0:0] tmp_s_fu_223_p2;
reg   [0:0] tmp_s_reg_392;
wire   [0:0] tmp_3_fu_229_p2;
reg   [0:0] tmp_3_reg_397;
wire    ap_CS_fsm_state4;
wire  signed [31:0] val_assign_fu_357_p2;
reg  signed [31:0] val_assign_reg_412;
wire    ap_CS_fsm_state6;
reg   [39:0] tmp_9_reg_417;
wire   [89:0] r_V_1_fu_290_p2;
reg   [89:0] r_V_1_reg_422;
wire    ap_CS_fsm_state7;
wire   [0:0] tmp_5_fu_306_p2;
reg   [0:0] tmp_5_reg_427;
wire   [0:0] icmp8_fu_322_p2;
reg   [0:0] icmp8_reg_433;
wire   [15:0] Res_Out_fu_348_p3;
wire  signed [31:0] GiE_fu_240_p3;
wire  signed [16:0] tmp_1_cast_fu_123_p1;
wire  signed [16:0] tmp_2_cast_fu_127_p1;
wire   [16:0] x_assign_fu_131_p2;
wire   [1:0] tmp_fu_143_p4;
wire   [0:0] tmp_4_fu_137_p2;
wire   [0:0] icmp_fu_153_p2;
wire   [0:0] tmp_1_fu_167_p2;
wire   [16:0] x_max_x_i1_cast_fu_159_p3;
wire   [31:0] tmp_7_fu_204_p3;
wire   [31:0] x_max_x_i_fu_235_p3;
wire   [47:0] grp_fu_254_p2;
wire  signed [87:0] tmp_2_fu_280_p1;
wire  signed [89:0] lhs_V_1_cast_fu_283_p1;
wire   [89:0] tmp_10_cast_fu_286_p1;
wire   [47:0] phitmp_fu_296_p4;
wire   [32:0] tmp_10_fu_312_p4;
wire   [0:0] tmp_11_fu_344_p2;
wire   [15:0] p_phitmp1_fu_337_p3;
wire   [15:0] phitmp1_fu_328_p4;
wire  signed [16:0] val_assign_fu_357_p1;
reg   [8:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 9'd1;
#0 s_axis_V_0_sel_rd = 1'b0;
#0 s_axis_V_0_sel_wr = 1'b0;
#0 s_axis_V_0_state = 2'd0;
#0 m_axis_V_1_sel_rd = 1'b0;
#0 m_axis_V_1_sel_wr = 1'b0;
#0 m_axis_V_1_state = 2'd0;
#0 Mode_prev = 32'd0;
#0 GiE_prev = 32'd0;
end

PI_Control_mul_16bkb #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 48 ))
PI_Control_mul_16bkb_U0(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(Ki),
    .din1(GiE_fu_240_p3),
    .ce(1'b1),
    .dout(grp_fu_254_p2)
);

PI_Control_mul_mucud #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 17 ),
    .dout_WIDTH( 32 ))
PI_Control_mul_mucud_U1(
    .din0(Kp),
    .din1(val_assign_fu_357_p1),
    .dout(val_assign_fu_357_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        m_axis_V_1_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == m_axis_V_1_ack_out) & (1'b1 == m_axis_V_1_vld_out))) begin
            m_axis_V_1_sel_rd <= ~m_axis_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        m_axis_V_1_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == m_axis_V_1_vld_in) & (1'b1 == m_axis_V_1_ack_in))) begin
            m_axis_V_1_sel_wr <= ~m_axis_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        m_axis_V_1_state <= 2'd0;
    end else begin
        if ((((1'b0 == m_axis_V_1_vld_in) & (1'b1 == m_axis_V_1_ack_out) & (2'd3 == m_axis_V_1_state)) | ((1'b0 == m_axis_V_1_vld_in) & (2'd2 == m_axis_V_1_state)))) begin
            m_axis_V_1_state <= 2'd2;
        end else if ((((1'b1 == m_axis_V_1_vld_in) & (1'b0 == m_axis_V_1_ack_out) & (2'd3 == m_axis_V_1_state)) | ((1'b0 == m_axis_V_1_ack_out) & (2'd1 == m_axis_V_1_state)))) begin
            m_axis_V_1_state <= 2'd1;
        end else if ((((1'b1 == m_axis_V_1_vld_in) & (2'd2 == m_axis_V_1_state)) | ((1'b1 == m_axis_V_1_ack_out) & (2'd1 == m_axis_V_1_state)) | ((2'd3 == m_axis_V_1_state) & ~((1'b1 == m_axis_V_1_vld_in) & (1'b0 == m_axis_V_1_ack_out)) & ~((1'b0 == m_axis_V_1_vld_in) & (1'b1 == m_axis_V_1_ack_out))))) begin
            m_axis_V_1_state <= 2'd3;
        end else begin
            m_axis_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        s_axis_V_0_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == s_axis_V_0_ack_out) & (1'b1 == s_axis_V_0_vld_out))) begin
            s_axis_V_0_sel_rd <= ~s_axis_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        s_axis_V_0_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == s_axis_V_0_vld_in) & (1'b1 == s_axis_V_0_ack_in))) begin
            s_axis_V_0_sel_wr <= ~s_axis_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        s_axis_V_0_state <= 2'd0;
    end else begin
        if ((((1'b0 == s_axis_V_0_vld_in) & (1'b1 == s_axis_V_0_ack_out) & (s_axis_V_0_state == 2'd3)) | ((1'b0 == s_axis_V_0_vld_in) & (s_axis_V_0_state == 2'd2)))) begin
            s_axis_V_0_state <= 2'd2;
        end else if ((((1'b1 == s_axis_V_0_vld_in) & (1'b0 == s_axis_V_0_ack_out) & (s_axis_V_0_state == 2'd3)) | ((1'b0 == s_axis_V_0_ack_out) & (s_axis_V_0_state == 2'd1)))) begin
            s_axis_V_0_state <= 2'd1;
        end else if ((((1'b1 == s_axis_V_0_vld_in) & (s_axis_V_0_state == 2'd2)) | ((1'b1 == s_axis_V_0_ack_out) & (s_axis_V_0_state == 2'd1)) | ((s_axis_V_0_state == 2'd3) & ~((1'b1 == s_axis_V_0_vld_in) & (1'b0 == s_axis_V_0_ack_out)) & ~((1'b0 == s_axis_V_0_vld_in) & (1'b1 == s_axis_V_0_ack_out))))) begin
            s_axis_V_0_state <= 2'd3;
        end else begin
            s_axis_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        Err_cast_reg_377 <= Err_cast_fu_197_p1;
        tmp_3_reg_397 <= tmp_3_fu_229_p2;
        tmp_s_reg_392 <= tmp_s_fu_223_p2;
        x_assign_1_reg_382 <= x_assign_1_fu_211_p2;
        x_min_assign_reg_387 <= x_min_assign_fu_217_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (s_axis_V_0_vld_out == 1'b1))) begin
        Err_reg_362 <= Err_fu_173_p3;
        Mode_prev <= mode;
        tmp_6_reg_367 <= tmp_6_fu_185_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        GiE_prev <= GiE_fu_240_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        icmp8_reg_433 <= icmp8_fu_322_p2;
        r_V_1_reg_422 <= r_V_1_fu_290_p2;
        tmp_5_reg_427 <= tmp_5_fu_306_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == m_axis_V_1_load_A)) begin
        m_axis_V_1_payload_A <= Res_Out_fu_348_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == m_axis_V_1_load_B)) begin
        m_axis_V_1_payload_B <= Res_Out_fu_348_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == s_axis_V_0_load_A)) begin
        s_axis_V_0_payload_A <= s_axis_V_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == s_axis_V_0_load_B)) begin
        s_axis_V_0_payload_B <= s_axis_V_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        tmp_9_reg_417 <= {{grp_fu_254_p2[47:8]}};
        val_assign_reg_412 <= val_assign_fu_357_p2;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state9) & (m_axis_V_1_ack_in == 1'b1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state9) & (m_axis_V_1_ack_in == 1'b1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == m_axis_V_1_sel)) begin
        m_axis_V_1_data_out = m_axis_V_1_payload_B;
    end else begin
        m_axis_V_1_data_out = m_axis_V_1_payload_A;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) & (m_axis_V_1_ack_in == 1'b1))) begin
        m_axis_V_1_vld_in = 1'b1;
    end else begin
        m_axis_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state9))) begin
        m_axis_V_TDATA_blk_n = m_axis_V_1_state[1'd1];
    end else begin
        m_axis_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (s_axis_V_0_vld_out == 1'b1))) begin
        s_axis_V_0_ack_out = 1'b1;
    end else begin
        s_axis_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == s_axis_V_0_sel)) begin
        s_axis_V_0_data_out = s_axis_V_0_payload_B;
    end else begin
        s_axis_V_0_data_out = s_axis_V_0_payload_A;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        s_axis_V_TDATA_blk_n = s_axis_V_0_state[1'd0];
    end else begin
        s_axis_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (s_axis_V_0_vld_out == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            if (((1'b1 == ap_CS_fsm_state8) & (m_axis_V_1_ack_in == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state9 : begin
            if (((1'b1 == ap_CS_fsm_state9) & (m_axis_V_1_ack_in == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign Err_cast_fu_197_p1 = $signed(Err_reg_362);

assign Err_fu_173_p3 = ((tmp_1_fu_167_p2[0:0] === 1'b1) ? x_max_x_i1_cast_fu_159_p3 : x_assign_fu_131_p2);

assign GiE_fu_240_p3 = ((tmp_s_reg_392[0:0] === 1'b1) ? x_min_assign_reg_387 : x_max_x_i_fu_235_p3);

assign Res_Out_fu_348_p3 = ((tmp_11_fu_344_p2[0:0] === 1'b1) ? p_phitmp1_fu_337_p3 : phitmp1_fu_328_p4);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign icmp8_fu_322_p2 = (($signed(tmp_10_fu_312_p4) > $signed(33'd0)) ? 1'b1 : 1'b0);

assign icmp_fu_153_p2 = ((tmp_fu_143_p4 == 2'd1) ? 1'b1 : 1'b0);

assign lhs_V_1_cast_fu_283_p1 = val_assign_reg_412;

assign m_axis_V_1_ack_in = m_axis_V_1_state[1'd1];

assign m_axis_V_1_ack_out = m_axis_V_TREADY;

assign m_axis_V_1_load_A = (m_axis_V_1_state_cmp_full & ~m_axis_V_1_sel_wr);

assign m_axis_V_1_load_B = (m_axis_V_1_sel_wr & m_axis_V_1_state_cmp_full);

assign m_axis_V_1_sel = m_axis_V_1_sel_rd;

assign m_axis_V_1_state_cmp_full = ((m_axis_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign m_axis_V_1_vld_out = m_axis_V_1_state[1'd0];

assign m_axis_V_TDATA = m_axis_V_1_data_out;

assign m_axis_V_TVALID = m_axis_V_1_state[1'd0];

assign p_phitmp1_fu_337_p3 = ((tmp_5_reg_427[0:0] === 1'b1) ? 16'd32769 : 16'd32767);

assign phitmp1_fu_328_p4 = {{r_V_1_reg_422[23:8]}};

assign phitmp_fu_296_p4 = {{r_V_1_fu_290_p2[55:8]}};

assign r_V_1_fu_290_p2 = ($signed(lhs_V_1_cast_fu_283_p1) + $signed(tmp_10_cast_fu_286_p1));

assign s_axis_V_0_ack_in = s_axis_V_0_state[1'd1];

assign s_axis_V_0_load_A = (s_axis_V_0_state_cmp_full & ~s_axis_V_0_sel_wr);

assign s_axis_V_0_load_B = (s_axis_V_0_sel_wr & s_axis_V_0_state_cmp_full);

assign s_axis_V_0_sel = s_axis_V_0_sel_rd;

assign s_axis_V_0_state_cmp_full = ((s_axis_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign s_axis_V_0_vld_in = s_axis_V_TVALID;

assign s_axis_V_0_vld_out = s_axis_V_0_state[1'd0];

assign s_axis_V_TREADY = s_axis_V_0_state[1'd1];

assign tmp_10_cast_fu_286_p1 = $unsigned(tmp_2_fu_280_p1);

assign tmp_10_fu_312_p4 = {{r_V_1_fu_290_p2[55:23]}};

assign tmp_11_fu_344_p2 = (tmp_5_reg_427 | icmp8_reg_433);

assign tmp_1_cast_fu_123_p1 = $signed(Sp);

assign tmp_1_fu_167_p2 = (tmp_4_fu_137_p2 | icmp_fu_153_p2);

assign tmp_2_cast_fu_127_p1 = $signed(s_axis_V_0_data_out);

assign tmp_2_fu_280_p1 = $signed(tmp_9_reg_417);

assign tmp_3_fu_229_p2 = (($signed(x_assign_1_fu_211_p2) > $signed(limit)) ? 1'b1 : 1'b0);

assign tmp_4_fu_137_p2 = (($signed(x_assign_fu_131_p2) < $signed(17'd98305)) ? 1'b1 : 1'b0);

assign tmp_5_fu_306_p2 = (($signed(phitmp_fu_296_p4) < $signed(48'd281474976677889)) ? 1'b1 : 1'b0);

assign tmp_6_fu_185_p2 = ((Mode_prev == mode) ? 1'b1 : 1'b0);

assign tmp_7_fu_204_p3 = ((tmp_6_reg_367[0:0] === 1'b1) ? GiE_prev : 32'd0);

assign tmp_fu_143_p4 = {{x_assign_fu_131_p2[16:15]}};

assign tmp_s_fu_223_p2 = (($signed(x_assign_1_fu_211_p2) < $signed(x_min_assign_fu_217_p2)) ? 1'b1 : 1'b0);

assign val_assign_fu_357_p1 = Err_cast_reg_377;

assign x_assign_1_fu_211_p2 = ($signed(Err_cast_fu_197_p1) + $signed(tmp_7_fu_204_p3));

assign x_assign_fu_131_p2 = ($signed(tmp_1_cast_fu_123_p1) - $signed(tmp_2_cast_fu_127_p1));

assign x_max_x_i1_cast_fu_159_p3 = ((tmp_4_fu_137_p2[0:0] === 1'b1) ? 17'd98305 : 17'd32767);

assign x_max_x_i_fu_235_p3 = ((tmp_3_reg_397[0:0] === 1'b1) ? limit : x_assign_1_reg_382);

assign x_min_assign_fu_217_p2 = (32'd0 - limit);

endmodule //PI_Control
