// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.1
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="Park_Inverse,hls_ip_2017_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.450000,HLS_SYN_LAT=6,HLS_SYN_TPT=none,HLS_SYN_MEM=2,HLS_SYN_DSP=4,HLS_SYN_FF=515,HLS_SYN_LUT=211}" *)

module Park_Inverse (
        ap_clk,
        ap_rst_n,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        s_axis_V_TDATA,
        s_axis_V_TVALID,
        s_axis_V_TREADY,
        m_axis_V_TDATA,
        m_axis_V_TVALID,
        m_axis_V_TREADY
);

parameter    ap_ST_fsm_state1 = 7'd1;
parameter    ap_ST_fsm_state2 = 7'd2;
parameter    ap_ST_fsm_state3 = 7'd4;
parameter    ap_ST_fsm_state4 = 7'd8;
parameter    ap_ST_fsm_state5 = 7'd16;
parameter    ap_ST_fsm_state6 = 7'd32;
parameter    ap_ST_fsm_state7 = 7'd64;

input   ap_clk;
input   ap_rst_n;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [63:0] s_axis_V_TDATA;
input   s_axis_V_TVALID;
output   s_axis_V_TREADY;
output  [63:0] m_axis_V_TDATA;
output   m_axis_V_TVALID;
input   m_axis_V_TREADY;

reg ap_done;
reg ap_idle;
reg ap_ready;

reg    ap_rst_n_inv;
(* fsm_encoding = "none" *) reg   [6:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [63:0] s_axis_V_0_data_out;
wire    s_axis_V_0_vld_in;
wire    s_axis_V_0_vld_out;
wire    s_axis_V_0_ack_in;
reg    s_axis_V_0_ack_out;
reg   [63:0] s_axis_V_0_payload_A;
reg   [63:0] s_axis_V_0_payload_B;
reg    s_axis_V_0_sel_rd;
reg    s_axis_V_0_sel_wr;
wire    s_axis_V_0_sel;
wire    s_axis_V_0_load_A;
wire    s_axis_V_0_load_B;
reg   [1:0] s_axis_V_0_state;
wire    s_axis_V_0_state_cmp_full;
reg   [63:0] m_axis_V_1_data_out;
reg    m_axis_V_1_vld_in;
wire    m_axis_V_1_vld_out;
wire    m_axis_V_1_ack_in;
wire    m_axis_V_1_ack_out;
reg   [63:0] m_axis_V_1_payload_A;
reg   [63:0] m_axis_V_1_payload_B;
reg    m_axis_V_1_sel_rd;
reg    m_axis_V_1_sel_wr;
wire    m_axis_V_1_sel;
wire    m_axis_V_1_load_A;
wire    m_axis_V_1_load_B;
reg   [1:0] m_axis_V_1_state;
wire    m_axis_V_1_state_cmp_full;
wire   [9:0] cos_table_address0;
reg    cos_table_ce0;
wire   [15:0] cos_table_q0;
wire   [9:0] sin_table_address0;
reg    sin_table_ce0;
wire   [15:0] sin_table_q0;
reg    s_axis_V_TDATA_blk_n;
wire    ap_CS_fsm_state2;
reg    m_axis_V_TDATA_blk_n;
wire    ap_CS_fsm_state6;
wire    ap_CS_fsm_state7;
wire   [15:0] tmp_fu_95_p1;
reg  signed [15:0] tmp_reg_275;
reg  signed [15:0] tmp_3_reg_280;
wire   [15:0] tmp_5_fu_109_p4;
reg   [15:0] tmp_5_reg_285;
reg   [15:0] cos_table_load_reg_300;
wire    ap_CS_fsm_state3;
reg   [15:0] sin_table_load_reg_305;
wire  signed [31:0] Vd_fu_125_p1;
reg  signed [31:0] Vd_reg_310;
wire    ap_CS_fsm_state4;
wire  signed [31:0] Vq_fu_128_p1;
reg  signed [31:0] Vq_reg_315;
wire  signed [31:0] Vd_cos_fu_247_p2;
reg  signed [31:0] Vd_cos_reg_320;
wire  signed [31:0] Vq_cos_fu_253_p2;
reg  signed [31:0] Vq_cos_reg_325;
reg   [16:0] tmp_2_reg_330;
wire    ap_CS_fsm_state5;
reg   [16:0] tmp_4_reg_335;
wire   [0:0] icmp_fu_164_p2;
reg   [0:0] icmp_reg_340;
wire   [0:0] icmp3_fu_179_p2;
reg   [0:0] icmp3_reg_345;
wire   [63:0] tmp_14_fu_242_p1;
wire  signed [31:0] Theta_fu_119_p1;
wire  signed [31:0] grp_fu_259_p3;
wire  signed [31:0] grp_fu_267_p3;
wire   [1:0] tmp_1_fu_155_p4;
wire   [1:0] tmp_9_fu_170_p4;
wire   [16:0] Valpha_fu_185_p3;
wire   [16:0] Vbeta_fu_197_p3;
wire   [0:0] tmp_7_fu_191_p2;
wire   [15:0] tmp_10_fu_209_p1;
wire   [0:0] tmp_s_fu_203_p2;
wire   [15:0] tmp_11_fu_221_p1;
wire   [15:0] tmp_12_fu_225_p3;
wire   [15:0] tmp_17_cast_fu_213_p3;
wire   [47:0] res_fu_233_p4;
wire  signed [15:0] Vd_cos_fu_247_p0;
wire  signed [31:0] cos_theta_fu_131_p1;
wire  signed [15:0] Vq_cos_fu_253_p0;
wire  signed [15:0] grp_fu_259_p0;
wire  signed [15:0] grp_fu_259_p1;
wire  signed [31:0] sin_theta_fu_134_p1;
wire  signed [15:0] grp_fu_267_p0;
wire  signed [15:0] grp_fu_267_p1;
reg   [6:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 7'd1;
#0 s_axis_V_0_sel_rd = 1'b0;
#0 s_axis_V_0_sel_wr = 1'b0;
#0 s_axis_V_0_state = 2'd0;
#0 m_axis_V_1_sel_rd = 1'b0;
#0 m_axis_V_1_sel_wr = 1'b0;
#0 m_axis_V_1_state = 2'd0;
end

Park_Inverse_cos_bkb #(
    .DataWidth( 16 ),
    .AddressRange( 1000 ),
    .AddressWidth( 10 ))
cos_table_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(cos_table_address0),
    .ce0(cos_table_ce0),
    .q0(cos_table_q0)
);

Park_Inverse_sin_cud #(
    .DataWidth( 16 ),
    .AddressRange( 1000 ),
    .AddressWidth( 10 ))
sin_table_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(sin_table_address0),
    .ce0(sin_table_ce0),
    .q0(sin_table_q0)
);

Park_Inverse_mul_dEe #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 32 ))
Park_Inverse_mul_dEe_U0(
    .din0(Vd_cos_fu_247_p0),
    .din1(tmp_reg_275),
    .dout(Vd_cos_fu_247_p2)
);

Park_Inverse_mul_dEe #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 32 ))
Park_Inverse_mul_dEe_U1(
    .din0(Vq_cos_fu_253_p0),
    .din1(tmp_3_reg_280),
    .dout(Vq_cos_fu_253_p2)
);

Park_Inverse_mac_eOg #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
Park_Inverse_mac_eOg_U2(
    .din0(grp_fu_259_p0),
    .din1(grp_fu_259_p1),
    .din2(Vd_cos_reg_320),
    .dout(grp_fu_259_p3)
);

Park_Inverse_mac_fYi #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
Park_Inverse_mac_fYi_U3(
    .din0(grp_fu_267_p0),
    .din1(grp_fu_267_p1),
    .din2(Vq_cos_reg_325),
    .dout(grp_fu_267_p3)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        m_axis_V_1_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == m_axis_V_1_ack_out) & (1'b1 == m_axis_V_1_vld_out))) begin
            m_axis_V_1_sel_rd <= ~m_axis_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        m_axis_V_1_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == m_axis_V_1_vld_in) & (1'b1 == m_axis_V_1_ack_in))) begin
            m_axis_V_1_sel_wr <= ~m_axis_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        m_axis_V_1_state <= 2'd0;
    end else begin
        if ((((1'b0 == m_axis_V_1_vld_in) & (1'b1 == m_axis_V_1_ack_out) & (2'd3 == m_axis_V_1_state)) | ((1'b0 == m_axis_V_1_vld_in) & (2'd2 == m_axis_V_1_state)))) begin
            m_axis_V_1_state <= 2'd2;
        end else if ((((1'b1 == m_axis_V_1_vld_in) & (1'b0 == m_axis_V_1_ack_out) & (2'd3 == m_axis_V_1_state)) | ((1'b0 == m_axis_V_1_ack_out) & (2'd1 == m_axis_V_1_state)))) begin
            m_axis_V_1_state <= 2'd1;
        end else if ((((1'b1 == m_axis_V_1_vld_in) & (2'd2 == m_axis_V_1_state)) | ((1'b1 == m_axis_V_1_ack_out) & (2'd1 == m_axis_V_1_state)) | ((2'd3 == m_axis_V_1_state) & ~((1'b1 == m_axis_V_1_vld_in) & (1'b0 == m_axis_V_1_ack_out)) & ~((1'b0 == m_axis_V_1_vld_in) & (1'b1 == m_axis_V_1_ack_out))))) begin
            m_axis_V_1_state <= 2'd3;
        end else begin
            m_axis_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        s_axis_V_0_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == s_axis_V_0_ack_out) & (1'b1 == s_axis_V_0_vld_out))) begin
            s_axis_V_0_sel_rd <= ~s_axis_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        s_axis_V_0_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == s_axis_V_0_vld_in) & (1'b1 == s_axis_V_0_ack_in))) begin
            s_axis_V_0_sel_wr <= ~s_axis_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        s_axis_V_0_state <= 2'd0;
    end else begin
        if ((((1'b0 == s_axis_V_0_vld_in) & (1'b1 == s_axis_V_0_ack_out) & (s_axis_V_0_state == 2'd3)) | ((1'b0 == s_axis_V_0_vld_in) & (s_axis_V_0_state == 2'd2)))) begin
            s_axis_V_0_state <= 2'd2;
        end else if ((((1'b1 == s_axis_V_0_vld_in) & (1'b0 == s_axis_V_0_ack_out) & (s_axis_V_0_state == 2'd3)) | ((1'b0 == s_axis_V_0_ack_out) & (s_axis_V_0_state == 2'd1)))) begin
            s_axis_V_0_state <= 2'd1;
        end else if ((((1'b1 == s_axis_V_0_vld_in) & (s_axis_V_0_state == 2'd2)) | ((1'b1 == s_axis_V_0_ack_out) & (s_axis_V_0_state == 2'd1)) | ((s_axis_V_0_state == 2'd3) & ~((1'b1 == s_axis_V_0_vld_in) & (1'b0 == s_axis_V_0_ack_out)) & ~((1'b0 == s_axis_V_0_vld_in) & (1'b1 == s_axis_V_0_ack_out))))) begin
            s_axis_V_0_state <= 2'd3;
        end else begin
            s_axis_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        Vd_cos_reg_320 <= Vd_cos_fu_247_p2;
        Vd_reg_310 <= Vd_fu_125_p1;
        Vq_cos_reg_325 <= Vq_cos_fu_253_p2;
        Vq_reg_315 <= Vq_fu_128_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        cos_table_load_reg_300 <= cos_table_q0;
        sin_table_load_reg_305 <= sin_table_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        icmp3_reg_345 <= icmp3_fu_179_p2;
        icmp_reg_340 <= icmp_fu_164_p2;
        tmp_2_reg_330 <= {{grp_fu_259_p3[31:15]}};
        tmp_4_reg_335 <= {{grp_fu_267_p3[31:15]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == m_axis_V_1_load_A)) begin
        m_axis_V_1_payload_A <= tmp_14_fu_242_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == m_axis_V_1_load_B)) begin
        m_axis_V_1_payload_B <= tmp_14_fu_242_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == s_axis_V_0_load_A)) begin
        s_axis_V_0_payload_A <= s_axis_V_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == s_axis_V_0_load_B)) begin
        s_axis_V_0_payload_B <= s_axis_V_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (s_axis_V_0_vld_out == 1'b1))) begin
        tmp_3_reg_280 <= {{s_axis_V_0_data_out[31:16]}};
        tmp_5_reg_285 <= {{s_axis_V_0_data_out[47:32]}};
        tmp_reg_275 <= tmp_fu_95_p1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) & (m_axis_V_1_ack_in == 1'b1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) & (m_axis_V_1_ack_in == 1'b1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (s_axis_V_0_vld_out == 1'b1))) begin
        cos_table_ce0 = 1'b1;
    end else begin
        cos_table_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == m_axis_V_1_sel)) begin
        m_axis_V_1_data_out = m_axis_V_1_payload_B;
    end else begin
        m_axis_V_1_data_out = m_axis_V_1_payload_A;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) & (m_axis_V_1_ack_in == 1'b1))) begin
        m_axis_V_1_vld_in = 1'b1;
    end else begin
        m_axis_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state7))) begin
        m_axis_V_TDATA_blk_n = m_axis_V_1_state[1'd1];
    end else begin
        m_axis_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (s_axis_V_0_vld_out == 1'b1))) begin
        s_axis_V_0_ack_out = 1'b1;
    end else begin
        s_axis_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == s_axis_V_0_sel)) begin
        s_axis_V_0_data_out = s_axis_V_0_payload_B;
    end else begin
        s_axis_V_0_data_out = s_axis_V_0_payload_A;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        s_axis_V_TDATA_blk_n = s_axis_V_0_state[1'd0];
    end else begin
        s_axis_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (s_axis_V_0_vld_out == 1'b1))) begin
        sin_table_ce0 = 1'b1;
    end else begin
        sin_table_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (s_axis_V_0_vld_out == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            if (((1'b1 == ap_CS_fsm_state6) & (m_axis_V_1_ack_in == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state7 : begin
            if (((1'b1 == ap_CS_fsm_state7) & (m_axis_V_1_ack_in == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign Theta_fu_119_p1 = $signed(tmp_5_fu_109_p4);

assign Valpha_fu_185_p3 = ((icmp_reg_340[0:0] === 1'b1) ? 17'd32767 : tmp_2_reg_330);

assign Vbeta_fu_197_p3 = ((icmp3_reg_345[0:0] === 1'b1) ? 17'd32767 : tmp_4_reg_335);

assign Vd_cos_fu_247_p0 = cos_theta_fu_131_p1;

assign Vd_fu_125_p1 = tmp_reg_275;

assign Vq_cos_fu_253_p0 = cos_theta_fu_131_p1;

assign Vq_fu_128_p1 = tmp_3_reg_280;

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign cos_table_address0 = Theta_fu_119_p1;

assign cos_theta_fu_131_p1 = $signed(cos_table_load_reg_300);

assign grp_fu_259_p0 = Vq_reg_315;

assign grp_fu_259_p1 = sin_theta_fu_134_p1;

assign grp_fu_267_p0 = Vd_reg_310;

assign grp_fu_267_p1 = sin_theta_fu_134_p1;

assign icmp3_fu_179_p2 = ((tmp_9_fu_170_p4 == 2'd1) ? 1'b1 : 1'b0);

assign icmp_fu_164_p2 = ((tmp_1_fu_155_p4 == 2'd1) ? 1'b1 : 1'b0);

assign m_axis_V_1_ack_in = m_axis_V_1_state[1'd1];

assign m_axis_V_1_ack_out = m_axis_V_TREADY;

assign m_axis_V_1_load_A = (m_axis_V_1_state_cmp_full & ~m_axis_V_1_sel_wr);

assign m_axis_V_1_load_B = (m_axis_V_1_sel_wr & m_axis_V_1_state_cmp_full);

assign m_axis_V_1_sel = m_axis_V_1_sel_rd;

assign m_axis_V_1_state_cmp_full = ((m_axis_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign m_axis_V_1_vld_out = m_axis_V_1_state[1'd0];

assign m_axis_V_TDATA = m_axis_V_1_data_out;

assign m_axis_V_TVALID = m_axis_V_1_state[1'd0];

assign res_fu_233_p4 = {{{tmp_5_reg_285}, {tmp_12_fu_225_p3}}, {tmp_17_cast_fu_213_p3}};

assign s_axis_V_0_ack_in = s_axis_V_0_state[1'd1];

assign s_axis_V_0_load_A = (s_axis_V_0_state_cmp_full & ~s_axis_V_0_sel_wr);

assign s_axis_V_0_load_B = (s_axis_V_0_sel_wr & s_axis_V_0_state_cmp_full);

assign s_axis_V_0_sel = s_axis_V_0_sel_rd;

assign s_axis_V_0_state_cmp_full = ((s_axis_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign s_axis_V_0_vld_in = s_axis_V_TVALID;

assign s_axis_V_0_vld_out = s_axis_V_0_state[1'd0];

assign s_axis_V_TREADY = s_axis_V_0_state[1'd1];

assign sin_table_address0 = Theta_fu_119_p1;

assign sin_theta_fu_134_p1 = $signed(sin_table_load_reg_305);

assign tmp_10_fu_209_p1 = Valpha_fu_185_p3[15:0];

assign tmp_11_fu_221_p1 = Vbeta_fu_197_p3[15:0];

assign tmp_12_fu_225_p3 = ((tmp_s_fu_203_p2[0:0] === 1'b1) ? 16'd32769 : tmp_11_fu_221_p1);

assign tmp_14_fu_242_p1 = res_fu_233_p4;

assign tmp_17_cast_fu_213_p3 = ((tmp_7_fu_191_p2[0:0] === 1'b1) ? 16'd32769 : tmp_10_fu_209_p1);

assign tmp_1_fu_155_p4 = {{grp_fu_259_p3[31:30]}};

assign tmp_5_fu_109_p4 = {{s_axis_V_0_data_out[47:32]}};

assign tmp_7_fu_191_p2 = (($signed(Valpha_fu_185_p3) < $signed(17'd98305)) ? 1'b1 : 1'b0);

assign tmp_9_fu_170_p4 = {{grp_fu_267_p3[31:30]}};

assign tmp_fu_95_p1 = s_axis_V_0_data_out[15:0];

assign tmp_s_fu_203_p2 = (($signed(Vbeta_fu_197_p3) < $signed(17'd98305)) ? 1'b1 : 1'b0);

endmodule //Park_Inverse
