// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.1
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="Filters,hls_ip_2017_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=9.816500,HLS_SYN_LAT=69,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=8,HLS_SYN_FF=1047,HLS_SYN_LUT=528}" *)

module Filters (
        ap_clk,
        ap_rst_n,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        s_axis_V_TDATA,
        s_axis_V_TVALID,
        s_axis_V_TREADY,
        m_axis_V_TDATA,
        m_axis_V_TVALID,
        m_axis_V_TREADY,
        RPM_out,
        RPM_out_ap_vld,
        control
);

parameter    ap_ST_fsm_state1 = 9'd1;
parameter    ap_ST_fsm_state2 = 9'd2;
parameter    ap_ST_fsm_state3 = 9'd4;
parameter    ap_ST_fsm_state4 = 9'd8;
parameter    ap_ST_fsm_state5 = 9'd16;
parameter    ap_ST_fsm_state6 = 9'd32;
parameter    ap_ST_fsm_state7 = 9'd64;
parameter    ap_ST_fsm_state8 = 9'd128;
parameter    ap_ST_fsm_state9 = 9'd256;

input   ap_clk;
input   ap_rst_n;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [63:0] s_axis_V_TDATA;
input   s_axis_V_TVALID;
output   s_axis_V_TREADY;
output  [63:0] m_axis_V_TDATA;
output   m_axis_V_TVALID;
input   m_axis_V_TREADY;
output  [31:0] RPM_out;
output   RPM_out_ap_vld;
input  [31:0] control;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg RPM_out_ap_vld;

reg    ap_rst_n_inv;
(* fsm_encoding = "none" *) reg   [8:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [63:0] s_axis_V_0_data_out;
wire    s_axis_V_0_vld_in;
wire    s_axis_V_0_vld_out;
wire    s_axis_V_0_ack_in;
reg    s_axis_V_0_ack_out;
reg   [63:0] s_axis_V_0_payload_A;
reg   [63:0] s_axis_V_0_payload_B;
reg    s_axis_V_0_sel_rd;
reg    s_axis_V_0_sel_wr;
wire    s_axis_V_0_sel;
wire    s_axis_V_0_load_A;
wire    s_axis_V_0_load_B;
reg   [1:0] s_axis_V_0_state;
wire    s_axis_V_0_state_cmp_full;
reg   [63:0] m_axis_V_1_data_out;
reg    m_axis_V_1_vld_in;
wire    m_axis_V_1_vld_out;
wire    m_axis_V_1_ack_in;
wire    m_axis_V_1_ack_out;
reg   [63:0] m_axis_V_1_payload_A;
reg   [63:0] m_axis_V_1_payload_B;
reg    m_axis_V_1_sel_rd;
reg    m_axis_V_1_sel_wr;
wire    m_axis_V_1_sel;
wire    m_axis_V_1_load_A;
wire    m_axis_V_1_load_B;
reg   [1:0] m_axis_V_1_state;
wire    m_axis_V_1_state_cmp_full;
reg   [31:0] filt_acc;
reg   [4:0] filt_mem_address0;
reg    filt_mem_ce0;
reg    filt_mem_we0;
reg   [15:0] filt_mem_d0;
wire   [15:0] filt_mem_q0;
reg  signed [16:0] Y1a_prev;
reg  signed [16:0] Y1b_prev;
reg  signed [16:0] Y2a_prev;
reg  signed [16:0] Y2b_prev;
reg   [31:0] dc_cnt;
reg   [31:0] Ia_DC_acc;
reg   [31:0] Ib_DC_acc;
reg   [16:0] Ia_DC_val;
reg   [16:0] Ib_DC_val;
reg   [16:0] Ia_corr;
reg   [16:0] Ib_corr;
reg    s_axis_V_TDATA_blk_n;
wire    ap_CS_fsm_state2;
reg    m_axis_V_TDATA_blk_n;
wire    ap_CS_fsm_state8;
wire    ap_CS_fsm_state9;
wire   [15:0] Ia_fu_181_p1;
reg  signed [15:0] Ia_reg_653;
reg  signed [15:0] Ib_reg_658;
wire   [15:0] RPM_fu_195_p4;
reg   [15:0] RPM_reg_663;
reg   [15:0] Theta_reg_668;
wire   [31:0] tmp_6_fu_237_p2;
reg   [31:0] tmp_6_reg_673;
wire   [31:0] i_cast3_fu_249_p1;
reg   [31:0] i_cast3_reg_679;
wire    ap_CS_fsm_state3;
wire   [4:0] i_1_fu_259_p2;
reg   [4:0] i_1_reg_687;
wire   [0:0] tmp_7_fu_253_p2;
wire  signed [31:0] tmp_s_fu_590_p2;
reg  signed [31:0] tmp_s_reg_697;
wire  signed [31:0] tmp_3_fu_596_p2;
reg  signed [31:0] tmp_3_reg_702;
reg  signed [16:0] tmp_10_reg_707;
wire    ap_CS_fsm_state5;
reg  signed [16:0] tmp_11_reg_712;
wire  signed [31:0] tmp_13_fu_618_p2;
reg  signed [31:0] tmp_13_reg_717;
wire  signed [31:0] tmp_15_fu_624_p2;
reg  signed [31:0] tmp_15_reg_722;
wire  signed [27:0] RPM_f_cast_fu_347_p1;
reg  signed [27:0] RPM_f_cast_reg_727;
wire    ap_CS_fsm_state6;
reg   [15:0] Ia2_filtered_cast_reg_732;
reg   [15:0] Ib2_filtered_cast_reg_737;
reg   [31:0] dc_cnt_load_reg_742;
wire   [0:0] tmp_17_fu_417_p2;
reg   [0:0] tmp_17_reg_747;
wire   [31:0] tmp_20_fu_431_p2;
reg   [31:0] tmp_20_reg_751;
wire   [31:0] tmp_21_fu_437_p2;
reg   [31:0] tmp_21_reg_756;
reg   [15:0] tmp_26_reg_764;
wire    ap_CS_fsm_state7;
wire   [63:0] res_fu_579_p5;
reg   [4:0] i_reg_159;
wire    ap_CS_fsm_state4;
wire   [31:0] tmp_22_fu_497_p2;
reg   [31:0] storemerge_phi_fu_174_p4;
reg   [31:0] storemerge_reg_170;
wire   [31:0] i_1_cast_fu_265_p1;
wire   [16:0] tmp_16_fu_357_p4;
wire   [16:0] tmp_18_fu_379_p4;
wire  signed [31:0] Ia2_filtered_fu_366_p1;
wire  signed [31:0] Ib2_filtered_fu_388_p1;
wire   [0:0] tmp_23_fu_509_p2;
wire  signed [16:0] tmp_4_cast_fu_223_p1;
wire  signed [16:0] extLd9_cast_fu_215_p1;
wire   [16:0] tmp_5_fu_227_p2;
wire  signed [31:0] tmp_5_cast_fu_233_p1;
wire  signed [31:0] grp_fu_602_p3;
wire  signed [31:0] grp_fu_610_p3;
wire   [26:0] tmp_1_fu_338_p4;
wire  signed [31:0] grp_fu_630_p3;
wire  signed [31:0] grp_fu_639_p3;
wire   [27:0] tmp_24_fu_534_p2;
wire   [15:0] tmp_fu_557_p1;
wire   [15:0] tmp_27_fu_570_p1;
wire   [15:0] Ib_f_fu_574_p2;
wire   [15:0] Ia_f_fu_561_p2;
wire   [15:0] tmp_s_fu_590_p1;
wire   [15:0] tmp_3_fu_596_p1;
wire   [14:0] grp_fu_602_p1;
wire   [14:0] grp_fu_610_p1;
wire   [14:0] tmp_13_fu_618_p1;
wire   [14:0] tmp_15_fu_624_p1;
wire   [15:0] grp_fu_630_p1;
wire   [15:0] grp_fu_639_p1;
reg   [8:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 9'd1;
#0 s_axis_V_0_sel_rd = 1'b0;
#0 s_axis_V_0_sel_wr = 1'b0;
#0 s_axis_V_0_state = 2'd0;
#0 m_axis_V_1_sel_rd = 1'b0;
#0 m_axis_V_1_sel_wr = 1'b0;
#0 m_axis_V_1_state = 2'd0;
#0 filt_acc = 32'd0;
#0 Y1a_prev = 17'd0;
#0 Y1b_prev = 17'd0;
#0 Y2a_prev = 17'd0;
#0 Y2b_prev = 17'd0;
#0 dc_cnt = 32'd0;
#0 Ia_DC_acc = 32'd0;
#0 Ib_DC_acc = 32'd0;
#0 Ia_DC_val = 17'd0;
#0 Ib_DC_val = 17'd0;
#0 Ia_corr = 17'd0;
#0 Ib_corr = 17'd0;
end

Filters_filt_mem #(
    .DataWidth( 16 ),
    .AddressRange( 32 ),
    .AddressWidth( 5 ))
filt_mem_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(filt_mem_address0),
    .ce0(filt_mem_ce0),
    .we0(filt_mem_we0),
    .d0(filt_mem_d0),
    .q0(filt_mem_q0)
);

Filters_mul_mul_1bkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 32 ))
Filters_mul_mul_1bkb_U0(
    .din0(Ia_reg_653),
    .din1(tmp_s_fu_590_p1),
    .dout(tmp_s_fu_590_p2)
);

Filters_mul_mul_1bkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 32 ))
Filters_mul_mul_1bkb_U1(
    .din0(Ib_reg_658),
    .din1(tmp_3_fu_596_p1),
    .dout(tmp_3_fu_596_p2)
);

Filters_mac_muladcud #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 17 ),
    .din1_WIDTH( 15 ),
    .din2_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
Filters_mac_muladcud_U2(
    .din0(Y1a_prev),
    .din1(grp_fu_602_p1),
    .din2(tmp_s_reg_697),
    .dout(grp_fu_602_p3)
);

Filters_mac_muladcud #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 17 ),
    .din1_WIDTH( 15 ),
    .din2_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
Filters_mac_muladcud_U3(
    .din0(Y1b_prev),
    .din1(grp_fu_610_p1),
    .din2(tmp_3_reg_702),
    .dout(grp_fu_610_p3)
);

Filters_mul_mul_1dEe #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 17 ),
    .din1_WIDTH( 15 ),
    .dout_WIDTH( 32 ))
Filters_mul_mul_1dEe_U4(
    .din0(Y2a_prev),
    .din1(tmp_13_fu_618_p1),
    .dout(tmp_13_fu_618_p2)
);

Filters_mul_mul_1dEe #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 17 ),
    .din1_WIDTH( 15 ),
    .dout_WIDTH( 32 ))
Filters_mul_mul_1dEe_U5(
    .din0(Y2b_prev),
    .din1(tmp_15_fu_624_p1),
    .dout(tmp_15_fu_624_p2)
);

Filters_mac_muladeOg #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 17 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
Filters_mac_muladeOg_U6(
    .din0(tmp_10_reg_707),
    .din1(grp_fu_630_p1),
    .din2(tmp_13_reg_717),
    .dout(grp_fu_630_p3)
);

Filters_mac_muladeOg #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 17 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
Filters_mac_muladeOg_U7(
    .din0(tmp_11_reg_712),
    .din1(grp_fu_639_p1),
    .din2(tmp_15_reg_722),
    .dout(grp_fu_639_p3)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        m_axis_V_1_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == m_axis_V_1_ack_out) & (1'b1 == m_axis_V_1_vld_out))) begin
            m_axis_V_1_sel_rd <= ~m_axis_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        m_axis_V_1_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == m_axis_V_1_vld_in) & (1'b1 == m_axis_V_1_ack_in))) begin
            m_axis_V_1_sel_wr <= ~m_axis_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        m_axis_V_1_state <= 2'd0;
    end else begin
        if ((((1'b0 == m_axis_V_1_vld_in) & (1'b1 == m_axis_V_1_ack_out) & (2'd3 == m_axis_V_1_state)) | ((1'b0 == m_axis_V_1_vld_in) & (2'd2 == m_axis_V_1_state)))) begin
            m_axis_V_1_state <= 2'd2;
        end else if ((((1'b1 == m_axis_V_1_vld_in) & (1'b0 == m_axis_V_1_ack_out) & (2'd3 == m_axis_V_1_state)) | ((1'b0 == m_axis_V_1_ack_out) & (2'd1 == m_axis_V_1_state)))) begin
            m_axis_V_1_state <= 2'd1;
        end else if ((((1'b1 == m_axis_V_1_vld_in) & (2'd2 == m_axis_V_1_state)) | ((1'b1 == m_axis_V_1_ack_out) & (2'd1 == m_axis_V_1_state)) | ((2'd3 == m_axis_V_1_state) & ~((1'b1 == m_axis_V_1_vld_in) & (1'b0 == m_axis_V_1_ack_out)) & ~((1'b0 == m_axis_V_1_vld_in) & (1'b1 == m_axis_V_1_ack_out))))) begin
            m_axis_V_1_state <= 2'd3;
        end else begin
            m_axis_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        s_axis_V_0_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == s_axis_V_0_ack_out) & (1'b1 == s_axis_V_0_vld_out))) begin
            s_axis_V_0_sel_rd <= ~s_axis_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        s_axis_V_0_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == s_axis_V_0_vld_in) & (1'b1 == s_axis_V_0_ack_in))) begin
            s_axis_V_0_sel_wr <= ~s_axis_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        s_axis_V_0_state <= 2'd0;
    end else begin
        if ((((1'b0 == s_axis_V_0_vld_in) & (1'b1 == s_axis_V_0_ack_out) & (s_axis_V_0_state == 2'd3)) | ((1'b0 == s_axis_V_0_vld_in) & (s_axis_V_0_state == 2'd2)))) begin
            s_axis_V_0_state <= 2'd2;
        end else if ((((1'b1 == s_axis_V_0_vld_in) & (1'b0 == s_axis_V_0_ack_out) & (s_axis_V_0_state == 2'd3)) | ((1'b0 == s_axis_V_0_ack_out) & (s_axis_V_0_state == 2'd1)))) begin
            s_axis_V_0_state <= 2'd1;
        end else if ((((1'b1 == s_axis_V_0_vld_in) & (s_axis_V_0_state == 2'd2)) | ((1'b1 == s_axis_V_0_ack_out) & (s_axis_V_0_state == 2'd1)) | ((s_axis_V_0_state == 2'd3) & ~((1'b1 == s_axis_V_0_vld_in) & (1'b0 == s_axis_V_0_ack_out)) & ~((1'b0 == s_axis_V_0_vld_in) & (1'b1 == s_axis_V_0_ack_out))))) begin
            s_axis_V_0_state <= 2'd3;
        end else begin
            s_axis_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state7) & (1'd0 == tmp_17_reg_747))) begin
        Ia_DC_acc <= tmp_20_reg_751;
    end else if (((1'b1 == ap_CS_fsm_state6) & (1'd1 == tmp_17_fu_417_p2))) begin
        Ia_DC_acc <= Ia2_filtered_fu_366_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state7) & (1'd0 == tmp_17_reg_747))) begin
        Ib_DC_acc <= tmp_21_reg_756;
    end else if (((1'b1 == ap_CS_fsm_state6) & (1'd1 == tmp_17_fu_417_p2))) begin
        Ib_DC_acc <= Ib2_filtered_fu_388_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        i_reg_159 <= i_1_reg_687;
    end else if (((1'b1 == ap_CS_fsm_state2) & (s_axis_V_0_vld_out == 1'b1))) begin
        i_reg_159 <= 5'd31;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & (1'd1 == tmp_17_fu_417_p2))) begin
        storemerge_reg_170 <= 32'd0;
    end else if (((1'b1 == ap_CS_fsm_state7) & (1'd0 == tmp_17_reg_747))) begin
        storemerge_reg_170 <= tmp_22_fu_497_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        Ia2_filtered_cast_reg_732 <= {{grp_fu_630_p3[30:15]}};
        Ib2_filtered_cast_reg_737 <= {{grp_fu_639_p3[30:15]}};
        RPM_f_cast_reg_727 <= RPM_f_cast_fu_347_p1;
        Y2a_prev <= {{grp_fu_630_p3[31:15]}};
        Y2b_prev <= {{grp_fu_639_p3[31:15]}};
        dc_cnt_load_reg_742 <= dc_cnt;
        tmp_17_reg_747 <= tmp_17_fu_417_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & (1'd1 == tmp_17_fu_417_p2))) begin
        Ia_DC_val <= {{Ia_DC_acc[31:15]}};
        Ib_DC_val <= {{Ib_DC_acc[31:15]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state7) & (1'd1 == tmp_23_fu_509_p2))) begin
        Ia_corr <= Ia_DC_val;
        Ib_corr <= Ib_DC_val;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (s_axis_V_0_vld_out == 1'b1))) begin
        Ia_reg_653 <= Ia_fu_181_p1;
        Ib_reg_658 <= {{s_axis_V_0_data_out[31:16]}};
        RPM_reg_663 <= {{s_axis_V_0_data_out[47:32]}};
        Theta_reg_668 <= {{s_axis_V_0_data_out[63:48]}};
        filt_acc <= tmp_6_fu_237_p2;
        tmp_6_reg_673 <= tmp_6_fu_237_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        Y1a_prev <= {{grp_fu_602_p3[31:15]}};
        Y1b_prev <= {{grp_fu_610_p3[31:15]}};
        tmp_10_reg_707 <= {{grp_fu_602_p3[31:15]}};
        tmp_11_reg_712 <= {{grp_fu_610_p3[31:15]}};
        tmp_13_reg_717 <= tmp_13_fu_618_p2;
        tmp_15_reg_722 <= tmp_15_fu_624_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        dc_cnt <= storemerge_phi_fu_174_p4;
        tmp_26_reg_764 <= {{tmp_6_reg_673[20:5]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (1'd0 == tmp_7_fu_253_p2))) begin
        i_1_reg_687 <= i_1_fu_259_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        i_cast3_reg_679[4 : 0] <= i_cast3_fu_249_p1[4 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == m_axis_V_1_load_A)) begin
        m_axis_V_1_payload_A <= res_fu_579_p5;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == m_axis_V_1_load_B)) begin
        m_axis_V_1_payload_B <= res_fu_579_p5;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == s_axis_V_0_load_A)) begin
        s_axis_V_0_payload_A <= s_axis_V_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == s_axis_V_0_load_B)) begin
        s_axis_V_0_payload_B <= s_axis_V_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & (1'd0 == tmp_17_fu_417_p2))) begin
        tmp_20_reg_751 <= tmp_20_fu_431_p2;
        tmp_21_reg_756 <= tmp_21_fu_437_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (1'd1 == tmp_7_fu_253_p2))) begin
        tmp_3_reg_702 <= tmp_3_fu_596_p2;
        tmp_s_reg_697 <= tmp_s_fu_590_p2;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        RPM_out_ap_vld = 1'b1;
    end else begin
        RPM_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state9) & (m_axis_V_1_ack_in == 1'b1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state9) & (m_axis_V_1_ack_in == 1'b1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        filt_mem_address0 = i_cast3_reg_679;
    end else if (((1'b1 == ap_CS_fsm_state3) & (1'd1 == tmp_7_fu_253_p2))) begin
        filt_mem_address0 = 5'd0;
    end else if (((1'b1 == ap_CS_fsm_state3) & (1'd0 == tmp_7_fu_253_p2))) begin
        filt_mem_address0 = i_1_cast_fu_265_p1;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        filt_mem_address0 = 5'd31;
    end else begin
        filt_mem_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state3) & (1'd0 == tmp_7_fu_253_p2)) | ((1'b1 == ap_CS_fsm_state3) & (1'd1 == tmp_7_fu_253_p2)) | (1'b1 == ap_CS_fsm_state4) | ((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1)))) begin
        filt_mem_ce0 = 1'b1;
    end else begin
        filt_mem_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        filt_mem_d0 = filt_mem_q0;
    end else if (((1'b1 == ap_CS_fsm_state3) & (1'd1 == tmp_7_fu_253_p2))) begin
        filt_mem_d0 = RPM_reg_663;
    end else begin
        filt_mem_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state3) & (1'd1 == tmp_7_fu_253_p2)) | (1'b1 == ap_CS_fsm_state4))) begin
        filt_mem_we0 = 1'b1;
    end else begin
        filt_mem_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == m_axis_V_1_sel)) begin
        m_axis_V_1_data_out = m_axis_V_1_payload_B;
    end else begin
        m_axis_V_1_data_out = m_axis_V_1_payload_A;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) & (m_axis_V_1_ack_in == 1'b1))) begin
        m_axis_V_1_vld_in = 1'b1;
    end else begin
        m_axis_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state9))) begin
        m_axis_V_TDATA_blk_n = m_axis_V_1_state[1'd1];
    end else begin
        m_axis_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (s_axis_V_0_vld_out == 1'b1))) begin
        s_axis_V_0_ack_out = 1'b1;
    end else begin
        s_axis_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == s_axis_V_0_sel)) begin
        s_axis_V_0_data_out = s_axis_V_0_payload_B;
    end else begin
        s_axis_V_0_data_out = s_axis_V_0_payload_A;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        s_axis_V_TDATA_blk_n = s_axis_V_0_state[1'd0];
    end else begin
        s_axis_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) & (1'd0 == tmp_17_reg_747))) begin
        storemerge_phi_fu_174_p4 = tmp_22_fu_497_p2;
    end else begin
        storemerge_phi_fu_174_p4 = storemerge_reg_170;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (s_axis_V_0_vld_out == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (1'd1 == tmp_7_fu_253_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            if (((1'b1 == ap_CS_fsm_state8) & (m_axis_V_1_ack_in == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state9 : begin
            if (((1'b1 == ap_CS_fsm_state9) & (m_axis_V_1_ack_in == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign Ia2_filtered_fu_366_p1 = $signed(tmp_16_fu_357_p4);

assign Ia_f_fu_561_p2 = (Ia2_filtered_cast_reg_732 - tmp_fu_557_p1);

assign Ia_fu_181_p1 = s_axis_V_0_data_out[15:0];

assign Ib2_filtered_fu_388_p1 = $signed(tmp_18_fu_379_p4);

assign Ib_f_fu_574_p2 = (Ib2_filtered_cast_reg_737 - tmp_27_fu_570_p1);

assign RPM_f_cast_fu_347_p1 = $signed(tmp_1_fu_338_p4);

assign RPM_fu_195_p4 = {{s_axis_V_0_data_out[47:32]}};

assign RPM_out = $signed(tmp_24_fu_534_p2);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign extLd9_cast_fu_215_p1 = $signed(filt_mem_q0);

assign grp_fu_602_p1 = 32'd14647;

assign grp_fu_610_p1 = 32'd14647;

assign grp_fu_630_p1 = 32'd18120;

assign grp_fu_639_p1 = 32'd18120;

assign i_1_cast_fu_265_p1 = i_1_fu_259_p2;

assign i_1_fu_259_p2 = ($signed(i_reg_159) + $signed(5'd31));

assign i_cast3_fu_249_p1 = i_reg_159;

assign m_axis_V_1_ack_in = m_axis_V_1_state[1'd1];

assign m_axis_V_1_ack_out = m_axis_V_TREADY;

assign m_axis_V_1_load_A = (m_axis_V_1_state_cmp_full & ~m_axis_V_1_sel_wr);

assign m_axis_V_1_load_B = (m_axis_V_1_sel_wr & m_axis_V_1_state_cmp_full);

assign m_axis_V_1_sel = m_axis_V_1_sel_rd;

assign m_axis_V_1_state_cmp_full = ((m_axis_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign m_axis_V_1_vld_out = m_axis_V_1_state[1'd0];

assign m_axis_V_TDATA = m_axis_V_1_data_out;

assign m_axis_V_TVALID = m_axis_V_1_state[1'd0];

assign res_fu_579_p5 = {{{{Theta_reg_668}, {tmp_26_reg_764}}, {Ib_f_fu_574_p2}}, {Ia_f_fu_561_p2}};

assign s_axis_V_0_ack_in = s_axis_V_0_state[1'd1];

assign s_axis_V_0_load_A = (s_axis_V_0_state_cmp_full & ~s_axis_V_0_sel_wr);

assign s_axis_V_0_load_B = (s_axis_V_0_sel_wr & s_axis_V_0_state_cmp_full);

assign s_axis_V_0_sel = s_axis_V_0_sel_rd;

assign s_axis_V_0_state_cmp_full = ((s_axis_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign s_axis_V_0_vld_in = s_axis_V_TVALID;

assign s_axis_V_0_vld_out = s_axis_V_0_state[1'd0];

assign s_axis_V_TREADY = s_axis_V_0_state[1'd1];

assign tmp_13_fu_618_p1 = 32'd14647;

assign tmp_15_fu_624_p1 = 32'd14647;

assign tmp_16_fu_357_p4 = {{grp_fu_630_p3[31:15]}};

assign tmp_17_fu_417_p2 = (($signed(dc_cnt) > $signed(32'd32766)) ? 1'b1 : 1'b0);

assign tmp_18_fu_379_p4 = {{grp_fu_639_p3[31:15]}};

assign tmp_1_fu_338_p4 = {{tmp_6_reg_673[31:5]}};

assign tmp_20_fu_431_p2 = ($signed(Ia_DC_acc) + $signed(Ia2_filtered_fu_366_p1));

assign tmp_21_fu_437_p2 = ($signed(Ib_DC_acc) + $signed(Ib2_filtered_fu_388_p1));

assign tmp_22_fu_497_p2 = (dc_cnt_load_reg_742 + 32'd1);

assign tmp_23_fu_509_p2 = ((control == 32'd0) ? 1'b1 : 1'b0);

assign tmp_24_fu_534_p2 = ($signed(28'd0) - $signed(RPM_f_cast_reg_727));

assign tmp_27_fu_570_p1 = Ib_corr[15:0];

assign tmp_3_fu_596_p1 = 32'd18120;

assign tmp_4_cast_fu_223_p1 = $signed(RPM_fu_195_p4);

assign tmp_5_cast_fu_233_p1 = $signed(tmp_5_fu_227_p2);

assign tmp_5_fu_227_p2 = ($signed(tmp_4_cast_fu_223_p1) - $signed(extLd9_cast_fu_215_p1));

assign tmp_6_fu_237_p2 = ($signed(filt_acc) + $signed(tmp_5_cast_fu_233_p1));

assign tmp_7_fu_253_p2 = ((i_reg_159 == 5'd0) ? 1'b1 : 1'b0);

assign tmp_fu_557_p1 = Ia_corr[15:0];

assign tmp_s_fu_590_p1 = 32'd18120;

always @ (posedge ap_clk) begin
    i_cast3_reg_679[31:5] <= 27'b000000000000000000000000000;
end

endmodule //Filters
